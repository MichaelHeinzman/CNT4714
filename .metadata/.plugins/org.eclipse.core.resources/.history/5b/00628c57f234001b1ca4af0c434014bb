import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

public class SQLQueryServlet extends HttpServlet {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Connection connection;
	private Statement statement;

	
	// Setup database connection.
	@Override
	public void init(ServletConfig config) throws ServletException {
		
		// Override config.
		super.init(config);
		
		// Connected to database.
		try {
			
			// Use of xml file.
			Class.forName(config.getInitParameter("databaseDriver"));
		
			connection = DriverManager.getConnection(config.getInitParameter("databaseName"),
						 config.getInitParameter("username"), config.getInitParameter("password"));
			statement = connection.createStatement();
		}

		catch (Exception e) {
			e.printStackTrace();
			throw new UnavailableException(e.getMessage());
		}
	}

	// Process get request from jsp.
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
		
		throws ServletException, IOException {
			String textBox = request.getParameter("textBox");
			String textBoxLowerCase = textBox.toLowerCase();
			String result = null;
		
			// Check to see if it is a select statement.
			if (textBoxLowerCase.contains("select")) {
	
				try {
					result = doSelectQuery(textBoxLowerCase);
				} 
				
				catch (SQLException e) {
					result = "<span>" + e.getMessage() + "</span>";
	
					e.printStackTrace();
				}
			}
			else { 
				
				// Do insert,update, delete, create, drop.
				try {
					result = doUpdateQuery(textBoxLowerCase);
				}
				
				catch(SQLException e) {
					result = "<span>" + e.getMessage() + "</span>";
					e.printStackTrace();
				}
		}

		HttpSession session = request.getSession();
		session.setAttribute("result", result);
		session.setAttribute("textBox", textBox);
		RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/index.jsp");
		dispatcher.forward(request, response);
	}

	// Process post request from jsp.
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
			doGet(request, response);
	}

	// Execute a select query and create table html with resultset.
	public String doSelectQuery(String textBox) throws SQLException {
		
		String result;
		
		// Run sql command.
		ResultSet table = statement.executeQuery(textBox);
		
		// Process query results.
		ResultSetMetaData metaData = table.getMetaData();
		
		// Table columns html.
		int numOfColumns = metaData.getColumnCount();
		
		// html table opening html.
		String tableOpeningHTML = "<div class='container-fluid'><div class='row justify-content-center'><div class='table-responsive-sm-10 table-responsive-md-10 table-responsive-lg-10'><table class='table'>";
		
		// Table html columns.
		String tableColumnsHTML = "<thead class='thead-dark'><tr>";
		
		for (int i = 1; i <= numOfColumns; i++) {
			tableColumnsHTML += "<th scope='col'>" + metaData.getColumnName(i) + "</th>";
		}

		tableColumnsHTML += "</tr></thead>"; // close the html tale column element

		// Table html body/rows.
		String tableBodyHTML = "<tbody>";
		
		// Get row info.
		while (table.next()) {
			tableBodyHTML += "<tr>";
			for (int i = 1; i <= numOfColumns; i++) {
				
				// If first element.
				if (i == 1)
					tableBodyHTML += "<td scope'row'>" + table.getString(i) + "</th>";
				else
					tableBodyHTML += "<td>" + table.getString(i) + "</th>";
			}
			tableBodyHTML += "</tr>";
		}

		tableBodyHTML += "</tbody>";

		// Closing html.
		String tableClosingHTML = "</table></div></div></div>";
		result = tableOpeningHTML + tableColumnsHTML + tableBodyHTML + tableClosingHTML;

		return result;
	}
	
	private String doUpdateQuery(String textBoxLowerCase) throws SQLException {
		String result = null;
		int numOfRowsUpdated = 0;
		
		// Get number of shipment with quantity >= 100 before update/insert.
		ResultSet beforeQuantityCheck = statement.executeQuery("select COUNT(*) from shipments where quantity >= 100");
		beforeQuantityCheck.next();
		int numOfShipmentsWithQuantityGreaterThan100Before = beforeQuantityCheck.getInt(1);
		
		// Create temp table for the case of updating suppliers status's.
		statement.executeUpdate("create table shipmentsBeforeUpdate like shipments");
		
		// Copy table over to new temp table.
		statement.executeUpdate("insert into shipmentsBeforeUpdate select * from shipments");
		
		// Execute update.
		numOfRowsUpdated = statement.executeUpdate(textBoxLowerCase);
		result = "<div> The statement executed succesfully.</div><div>" + numOfRowsUpdated + " row(s) affected</div>";
		
		// Get number of shipment with quantity >= 100 before update/insert.
		ResultSet afterQuantityCheck = statement.executeQuery("select COUNT(*) from shipments where quantity >= 100");
		afterQuantityCheck.next();
		int numOfShipmentsWithQuantityGreaterThan100After = afterQuantityCheck.getInt(1);
		
		result += "<div>" + numOfShipmentsWithQuantityGreaterThan100Before + " < " + numOfShipmentsWithQuantityGreaterThan100After + "</div>";
		
		// Update the status of suppliers if shipment quantity is > 100.
		if(numOfShipmentsWithQuantityGreaterThan100Before < numOfShipmentsWithQuantityGreaterThan100After) {
			
			// Increase suppliers status by 5.
			// Handle updates into shipments by using a left join with shipments and temp table.
			int numberOfRowsAffectedAfterIncrementBy5 = statement.executeUpdate("update suppliers set status = status + 5 where snum in ( select distinct snum from shipments left join shipmentsBeforeUpdate using (snum, pnum, jnum, quantity) where shipmentsBeforeUpdate.snum is null)");
			result += "<div>Business Logic Detected! - Updating Supplier Status</div>";
			result += "<div>Business Logic Updated " + numberOfRowsAffectedAfterIncrementBy5 + " Supplier(s) status marks</div>";
		}
		
		// Drop temp table.
		statement.executeUpdate("drop table shipmentsBeforeUpdate");
		
		return result;
	}

}
